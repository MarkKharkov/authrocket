{"version":3,"sources":["authrocket.min.js","/source/authrocket.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","AuthRocket","request","_","this","config","env","process","NODE_ENV","settings","isString","apiUrl","isObject","has","urls","api","apiKey","accountId","realmId","value","loginData","requestWithHeaders","then","res","console","log","error","Promise","reject","token","signupData","err","endpoint","data","message","options","method","uri","headers","X-Authrocket-Account","X-Authrocket-Api-Key","X-Authrocket-Realm","Accept","Content-Type","User-agent","body"],"mappings":"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","file":"authrocket.min.js","sourcesContent":[null,"(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('request-promise'), require('lodash')) :\n\ttypeof define === 'function' && define.amd ? define(['request-promise', 'lodash'], factory) :\n\tglobal.AuthRocket = factory(global.request,global._);\n}(this, function (request,_) { 'use strict';\n\n\trequest = 'default' in request ? request['default'] : request;\n\t_ = 'default' in _ ? _['default'] : _;\n\n\tvar env = process.env.NODE_ENV;\n\tvar config;\n\tswitch (env) {\n\t\tcase 'local':\n\t\t\tconfig = require('./env/local');\n\t\t\tbreak;\n\t\t// case 'development':\n\t\t// \tconfig = require('./env/development');\n\t\t// \tbreak;\n\t\t// case 'staging':\n\t\t// \tconfig = require('./env/staging');\n\t\t// \tbreak;\n\t\tcase 'production':\n\t\t\tconfig = require('./env/production');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconfig = require('./env/production');\n\t\t\tbreak;\n\t}\n\n\tclass AuthRocket {\n\t  constructor(settings) {\n\t    if(settings && _.isString(settings)){\n\t      this.apiUrl = settings;\n\t    } else if (settings && _.isObject(settings)) {\n\t      //Set api url if within settings\n\t      this.apiUrl = _.has(settings, 'apiUrl') ? settings.apiUrl : config.urls.api;\n\t      this.apiKey = _.has(settings, 'apiKey') ? settings.apiKey : config.apiKey;\n\t      this.accountId = _.has(settings, 'accountId') ? settings.accountId : config.accountId;\n\t      this.realmId = _.has(settings, 'realmId') ? settings.realmId : config.realmId;\n\t    }\n\t  }\n\t  /** Login as a user\n\t   * @param {Object} loginData - Object containing data to signup with\n\t   * @param {String} loginData.email - Email of new user\n\t   * @param {String} loginData.password - Password of new user\n\t   * @return {Promise}\n\t   */\n\t  login(loginData) {\n\t    return this.requestWithHeaders('login', loginData).then((res) => {\n\t      console.log('successful login', res);\n\t      //TODO: Handle error response\n\t      return res;\n\t    }, (error) => {\n\t      console.error('Error logging in.', error);\n\t      return Promise.reject(error);\n\t    });\n\t  }\n\t  /** Logout a user\n\t   * @param {Object} token - Object containing data to signup with\n\t   * @return {Promise}\n\t   */\n\t  logout(token) {\n\t    return this.requestWithHeaders('logout', {token: token}).then((res) => {\n\t      console.log('successful logout', res);\n\t      //TODO: Handle error response\n\t      return res;\n\t    }, (error) => {\n\t      console.error('Error logging out.', error);\n\t      return Promise.reject(error);\n\t    });\n\t  }\n\t  /** Signup a new user\n\t   * @param {Object} signupData - Object containing data to signup with\n\t   * @param {String} signupData.email - Email of new user\n\t   * @param {String} signupData.password - Password of new user\n\t   * @param {String} signupData.confirm - Object containing data to signup with\n\t   * @return {Promise}\n\t   */\n\t  signup(signupData) {\n\t    return this.requestWithHeaders('signup', signupData).then((res) => {\n\t      console.log('successful signup', res);\n\t      //TODO: Handle error response\n\t      return res;\n\t    }, (error) => {\n\t      console.error('Error signing up.', error);\n\t      return Promise.reject(error);\n\t    });\n\t  }\n\t  /** Verify an existing token is valid\n\t   * @param {String} token - JSON Web Token to verify\n\t   * @return {Promise}\n\t   */\n\t  verify(token) {\n\t    return this.requestWithHeaders(`sessions/${token}`).then((res) => {\n\t      console.log('token is valid', res);\n\t      return res;\n\t    }, (err) => {\n\t      console.error('Token is invalid.', err);\n\t      return Promise.reject(err);\n\t    });\n\t  }\n\t  /** Attach AuthRocket request headers and make a request\n\t   * @param {String} endpoint - Endpoint to send request to\n\t   * @param {Object|String} data - Request data\n\t   * @return {Promise}\n\t   */\n\t  requestWithHeaders(endpoint, data) {\n\t    if (!_.has(this, ['accountId', 'apiKey', 'realm'])) {\n\t      console.error('Account, apiKey, and realm are required to make a request with headers');\n\t      return Promise.reject({message: 'Account, apiKey, and realm are required to make a request with headers.'});\n\t    }\n\t    let options = {\n\t      method: 'POST', //TODO: Handle other request methods\n\t      uri: `${this.apiUrl}/${endpoint}`,\n\t      headers: {\n\t        'X-Authrocket-Account': this.accountId,\n\t        'X-Authrocket-Api-Key': this.apiKey,\n\t        'X-Authrocket-Realm': this.realmId,\n\t        'Accept': 'application/json',\n\t        'Content-Type': 'application/json',\n\t        'User-agent': 'https://github.com/prescottprue/authrocket'\n\t      }\n\t    };\n\t    //Add data to request if it exists\n\t    if (data) {\n\t      options.body = data;\n\t    }\n\t    return request(options).then((res) => {\n\t      console.log('successful request:', res);\n\t      //TODO: Handle error response\n\t      return res;\n\t    }, (error) => {\n\t      console.error('Error with request:', error);\n\t      return Promise.reject(error);\n\t    });\n\t  }\n\t}\n\n\treturn AuthRocket;\n\n}));"],"sourceRoot":"/source/"}