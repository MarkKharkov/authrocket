{"version":3,"sources":["authrocket.min.js","/source/authrocket.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","require","define","amd","AuthRocket","request","_","this","___default","defaultConfig","envName","accountId","process","env","AUTHROCKET_ACCOUNT_ID","apiKey","AUTHROCKET_API_KEY","realmId","AUTHROCKET_REALM_ID","jwtSecret","AUTHROCKET_JWT_SECRET","urls","api","AUTHROCKET_API_URL","login","AUTHROCKET_LOGIN_URL","signup","AUTHROCKET_SIGNUP_URL","jslib","AUTHROCKET_JSLIB_URL","Config","merge","get","envs","logLevel","set","newEnv","config","settings","isString","apiUrl","has","value","loginData","requestWithHeaders","then","res","console","log","error","Promise","reject","token","signupData","err","endpoint","data","options","method","uri","headers","X-Authrocket-Account","X-Authrocket-Api-Key","X-Authrocket-Realm","Accept","Content-Type","User-agent","body"],"mappings":"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","file":"authrocket.min.js","sourcesContent":[null,"(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('request-promise'), require('lodash')) :\n\ttypeof define === 'function' && define.amd ? define(['request-promise', 'lodash'], factory) :\n\tglobal.AuthRocket = factory(global.request,global._);\n}(this, function (request,_) { 'use strict';\n\n\trequest = 'default' in request ? request['default'] : request;\n\tvar ___default = 'default' in _ ? _['default'] : _;\n\n\tlet defaultConfig = {\n\t\tenvName: 'local',\n\t\taccountId: process.env.AUTHROCKET_ACCOUNT_ID,\n\t\tapiKey: process.env.AUTHROCKET_API_KEY,\n\t\trealmId: process.env.AUTHROCKET_REALM_ID,\n\t\tjwtSecret: process.env.AUTHROCKET_JWT_SECRET,\n\t\turls: {\n\t\t\tapi: process.env.AUTHROCKET_API_URL  || 'https://api-e1.authrocket.com/v1/',\n\t\t\tlogin: process.env.AUTHROCKET_LOGIN_URL,\n\t\t\tsignup: process.env.AUTHROCKET_SIGNUP_URL,\n\t\t\tjslib: process.env.AUTHROCKET_JSLIB_URL\n\t\t}\n\t};\n\tlet instance = null;\n\tlet envName = 'prod';\n\tclass Config {\n\t\tconstructor() {\n\t\t\tif (!instance) {\n\t      instance = this;\n\t    }\n\t\t\t// console.log({description: 'Config object created.', config: merge(this, defaultConfig), func: 'constructor', obj: 'Config'});\n\t\t\treturn _.merge(instance, defaultConfig);\n\t\t}\n\t\tget logLevel() {\n\t\t\treturn defaultConfig.envs[envName].logLevel;\n\t\t}\n\t\tset envName(newEnv) {\n\t\t\tenvName = newEnv;\n\t\t\t// this.envName = newEnv;\n\t\t\t// console.log('Environment name set:', envName);\n\t\t}\n\t\tget env() {\n\t\t\treturn defaultConfig.envs[envName];\n\t\t}\n\t}\n\tlet config = new Config();\n\n\tclass AuthRocket {\n\t  constructor(settings) {\n\t    if (settings && ___default.isString(settings)) {\n\t      this.apiUrl = settings;\n\t    } else {\n\t      //Set api url if within settings\n\t      this.apiUrl = ___default.has(settings, 'apiUrl') ? settings.apiUrl : config.urls.api;\n\t      this.apiKey = ___default.has(settings, 'apiKey') ? settings.apiKey : config.apiKey;\n\t      this.accountId = ___default.has(settings, 'accountId') ? settings.accountId : config.accountId;\n\t      this.realmId = ___default.has(settings, 'realmId') ? settings.realmId : config.realmId;\n\t    }\n\t  }\n\t  /** Login as a user\n\t   * @param {Object} loginData - Object containing data to signup with\n\t   * @param {String} loginData.email - Email of new user\n\t   * @param {String} loginData.password - Password of new user\n\t   * @return {Promise}\n\t   */\n\t  login(loginData) {\n\t    return this.requestWithHeaders('login', loginData).then((res) => {\n\t      console.log('successful login', res);\n\t      //TODO: Handle error response\n\t      return res;\n\t    }, (error) => {\n\t      console.error('Error logging in.', error);\n\t      return Promise.reject(error);\n\t    });\n\t  }\n\t  /** Logout a user\n\t   * @param {Object} token - Object containing data to signup with\n\t   * @return {Promise}\n\t   */\n\t  logout(token) {\n\t    return this.requestWithHeaders('logout', {token: token}).then((res) => {\n\t      console.log('successful logout', res);\n\t      //TODO: Handle error response\n\t      return res;\n\t    }, (error) => {\n\t      console.error('Error logging out.', error);\n\t      return Promise.reject(error);\n\t    });\n\t  }\n\t  /** Signup a new user\n\t   * @param {Object} signupData - Object containing data to signup with\n\t   * @param {String} signupData.email - Email of new user\n\t   * @param {String} signupData.password - Password of new user\n\t   * @param {String} signupData.confirm - Object containing data to signup with\n\t   * @return {Promise}\n\t   */\n\t  signup(signupData) {\n\t    return this.requestWithHeaders('signup', signupData).then((res) => {\n\t      console.log('successful signup', res);\n\t      //TODO: Handle error response\n\t      return res;\n\t    }, (error) => {\n\t      console.error('Error signing up.', error);\n\t      return Promise.reject(error);\n\t    });\n\t  }\n\t  /** Verify an existing token is valid\n\t   * @param {String} token - JSON Web Token to verify\n\t   * @return {Promise}\n\t   */\n\t  verify(token) {\n\t    return this.requestWithHeaders(`sessions/${token}`).then((res) => {\n\t      console.log('token is valid', res);\n\t      return res;\n\t    }, (err) => {\n\t      console.error('Token is invalid.', err);\n\t      return Promise.reject(err);\n\t    });\n\t  }\n\t  /** Attach AuthRocket request headers and make a request\n\t   * @param {String} endpoint - Endpoint to send request to\n\t   * @param {Object|String} data - Request data\n\t   * @return {Promise}\n\t   */\n\t  requestWithHeaders(endpoint, data) {\n\t    // if (!_.has(this, ['accountId', 'apiKey', 'realmId'])) {\n\t    //   console.error('Account, apiKey, and realm are required to make a request with headers.', JSON.stringify(this));\n\t    //   return Promise.reject({message: 'Account, apiKey, and realm are required to make a request with headers.'});\n\t    // }\n\t    let options = {\n\t      method: 'POST', //TODO: Handle other request methods\n\t      uri: `${this.apiUrl}${endpoint}`,\n\t      headers: {\n\t        'X-Authrocket-Account': this.accountId,\n\t        'X-Authrocket-Api-Key': this.apiKey,\n\t        'X-Authrocket-Realm': this.realmId,\n\t        'Accept': 'application/json',\n\t        'Content-Type': 'application/json',\n\t        'User-agent': 'https://github.com/prescottprue/authrocket'\n\t      }\n\t    };\n\t    //Add data to request if it exists\n\t    if (data) {\n\t      options.body = data;\n\t    }\n\t    return request(options).then((res) => {\n\t      console.log('successful request:', res);\n\t      //TODO: Handle error response\n\t      return res;\n\t    }, (error) => {\n\t      console.error('Error with request:', error);\n\t      return Promise.reject(error);\n\t    });\n\t  }\n\t}\n\n\treturn AuthRocket;\n\n}));"],"sourceRoot":"/source/"}