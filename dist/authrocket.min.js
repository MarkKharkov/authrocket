function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(r,t,n){return t&&e(r.prototype,t),n&&e(r,n),r}}();!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r(require("request-promise"),require("lodash")):"function"==typeof define&&define.amd?define(["request-promise","lodash"],r):e.AuthRocket=r(e.request,e._)}(this,function(e,r){"use strict";e="default"in e?e["default"]:e,r="default"in r?r["default"]:r;var t,n=process.env.NODE_ENV;switch(n){case"local":t=require("./env/local");break;case"production":t=require("./env/production");break;default:t=require("./env/production")}var o=function(){function n(e){_classCallCheck(this,n),e&&r.isString(e)?this.apiUrl=e:e&&r.isObject(e)&&(this.apiUrl=r.has(e,"apiUrl")?e.apiUrl:t.urls.api,this.apiKey=r.has(e,"apiKey")?e.apiKey:t.apiKey,this.accountId=r.has(e,"accountId")?e.accountId:t.accountId,this.realmId=r.has(e,"realmId")?e.realmId:t.realmId)}return _createClass(n,[{key:"login",value:function(e){return this.requestWithHeaders("login",e).then(function(e){return console.log("successful login",e),e},function(e){return console.error("Error logging in.",e),Promise.reject(e)})}},{key:"logout",value:function(e){return this.requestWithHeaders("logout",{token:e}).then(function(e){return console.log("successful logout",e),e},function(e){return console.error("Error logging out.",e),Promise.reject(e)})}},{key:"signup",value:function(e){return this.requestWithHeaders("signup",e).then(function(e){return console.log("successful signup",e),e},function(e){return console.error("Error signing up.",e),Promise.reject(e)})}},{key:"verify",value:function(e){return this.requestWithHeaders("sessions/"+e).then(function(e){return console.log("token is valid",e),e},function(e){return console.error("Token is invalid.",e),Promise.reject(e)})}},{key:"requestWithHeaders",value:function(t,n){if(!r.has(this,["accountId","apiKey","realm"]))return console.error("Account, apiKey, and realm are required to make a request with headers"),Promise.reject({message:"Account, apiKey, and realm are required to make a request with headers."});var o={method:"POST",uri:this.apiUrl+"/"+t,headers:{"X-Authrocket-Account":this.accountId,"X-Authrocket-Api-Key":this.apiKey,"X-Authrocket-Realm":this.realmId,Accept:"application/json","Content-Type":"application/json","User-agent":"https://github.com/prescottprue/authrocket"}};return n&&(o.body=n),e(o).then(function(e){return console.log("successful request:",e),e},function(e){return console.error("Error with request:",e),Promise.reject(e)})}}]),n}();return o});
//# sourceMappingURL=authrocket.min.js.map
